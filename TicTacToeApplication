import javafx.scene.Scene;
import javafx.stage.Stage;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.text.Font;
import java.util.ArrayList;
import javafx.geometry.Insets;


import javafx.application.Application;


public class TicTacToeApplication extends Application {
    String Turn = "X";
    ArrayList<Button> buttons = new ArrayList<>();
    String endgame = "";
    
    


    public static void main(String[] args) {
        launch(TicTacToeApplication.class);
    }

    @Override
    public void start(Stage arg0) throws Exception {
        BorderPane bp = new BorderPane();
        
        
        Label TA = new Label(Turn + " current player");
        Label TB = new Label(endgame);
       
        
        
        GridPane gameB= new GridPane();      
        gameB.setPadding(new Insets(10,10,10,10));
        gameB.setHgap(10);
        gameB.setVgap(10);
       
        
        for(int i=0;i<9;i++){
            Button button = new Button();
            button.setFont(Font.font("Monospaced", 25));
            button.setMinSize(70, 70);
            button.setMaxSize(70, 70);
            
            button.setOnAction((event)->{
                if(endGame()){
                    button.disarm();
                    takeTurn();
                    TB.setText("Game Over");
                    TA.setText(Turn+ "wins");
                    
                    
                }else if(allTurns()){
                    System.out.println("ALLT");
                    button.disarm();
                    TB.setText("Game Over");
                    TA.setText("DRAW");
                    
                
                
                    
                    
                    
                }else if(button.getText().isEmpty()){
                    button.setText(this.Turn);
                    takeTurn();
                    TA.setText(Turn+ " turn");
                }
                
                
            });
            
            buttons.add(button);
            
        }
        
        gameB.add(buttons.get(0), 0, 0);
        gameB.add(buttons.get(1), 0, 1);
        gameB.add(buttons.get(2), 0, 2);
        gameB.add(buttons.get(3), 1, 0);
        gameB.add(buttons.get(4), 1, 1);
        gameB.add(buttons.get(5), 1, 2);
        gameB.add(buttons.get(6), 2, 0);
        gameB.add(buttons.get(7), 2, 1);
        gameB.add(buttons.get(8), 2, 2);
        
      
        
        bp.setTop(TA);
       bp.setBottom(TB);
        bp.setCenter(gameB);
        
        Scene scene = new Scene(bp);
        
        arg0.setScene(scene);
        arg0.show();
    }
    
        
        
 
        
        
        
        
     
        
        
        
        
        
    
public boolean endGame(){
    if(checkHorizontal()||checkVertical()||checkDiag()){
        
        
        
        return true;
        
    }
    
    return false;
    
    
}
    


    
    public void takeTurn(){
        if (this.Turn.equals("X")){
            this.Turn="O ";
        }else{
            this.Turn="X";
        }
    }
    
    
    public boolean allTurns(){
        for(Button b:this.buttons){
            if(b.getText().isEmpty()){
                return false;
            }
            
        }
        return true;
    }
    
    
    public boolean checkHorizontal(){
        if(!buttons.get(0).getText().isEmpty()&& (buttons.get(0).getText().equals(buttons.get(3).getText()))
                &&(buttons.get(3).getText().equals(buttons.get(6).getText()))){
            return true;
        }
        if(!buttons.get(1).getText().isEmpty()&& (buttons.get(1).getText().equals(buttons.get(4).getText()))
                &&(buttons.get(4).getText().equals(buttons.get(7).getText()))){
            return true;
        }
        if(!buttons.get(2).getText().isEmpty()&& (buttons.get(2).getText().equals(buttons.get(5).getText()))
                &&(buttons.get(5).getText().equals(buttons.get(8).getText()))){
            return true;
        }
        return false;
        
    }
    
     public boolean checkVertical(){
        if(!buttons.get(0).getText().isEmpty()&& (buttons.get(0).getText().equals(buttons.get(1).getText()))
                &&(buttons.get(1).getText().equals(buttons.get(2).getText()))){
            return true;
        }
        if(!buttons.get(3).getText().isEmpty()&& (buttons.get(3).getText().equals(buttons.get(4).getText()))
                &&(buttons.get(4).getText().equals(buttons.get(5).getText()))){
            return true;
        }
        if(!buttons.get(6).getText().isEmpty()&& (buttons.get(6).getText().equals(buttons.get(7).getText()))
                &&(buttons.get(7).getText().equals(buttons.get(8).getText()))){
            return true;
        }
        return false;
        
    }
     
       public boolean checkDiag(){
        if(!buttons.get(0).getText().isEmpty()&& (buttons.get(0).getText().equals(buttons.get(4).getText()))
                &&(buttons.get(4).getText().equals(buttons.get(8).getText()))){
            return true;
        }
        if(!buttons.get(2).getText().isEmpty()&& (buttons.get(2).getText().equals(buttons.get(4).getText()))
                &&(buttons.get(4).getText().equals(buttons.get(6).getText()))){
            return true;
        }
       
        return false;
        
    }

        }
